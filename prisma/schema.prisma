generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id           String      @id @default(cuid())
  title        String      @unique
  metadata     String?
  description  String
  images       Json
  location_from String
  location_to  String
  days         Int
  price        Float
  singleAdon   Int
  from_date    DateTime
  to_date      DateTime
  display      Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  timeline     TripTimeline[]
  featured     Featured[]
  reservations ProgramReservation[]
  priceInclude String
  generalConditions String
  phone String
}

model TripTimeline {
  id          String   @id @default(cuid())
  tripId      String
  title       String
  description String
  image       String?
  date        DateTime
  sortOrder   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Featured {
  id        String   @id @default(cuid())
  tripId    String
  image     String
  cta       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model LocalProgram {
  id           String      @id @default(cuid())
  title        String      @unique
  metadata     String?
  description  String
  images       Json
  location_from String
  location_to  String
  days         Int
  price        Float
  from_date    DateTime
  to_date      DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  timeline     ProgramTimeline[]
}

model ProgramTimeline {
  id          String   @id @default(cuid())
  programId   String
  title       String
  description String
  image       String?
  date        DateTime
  sortOrder   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  localProgram LocalProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model ProgramReservation {
  id              String            @id @default(cuid())
  tripId          String
  firstName       String
  lastName        String
  email           String
  phone           String
  numberOfPersons Int               @default(1)
  roomType        String            @default("double") // single, double, triple
  specialRequests String?
  preferredDate   DateTime?
  status          ReservationStatus @default(PENDING)
  totalPrice      Float?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  trip            Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TicketingReservation {
  id              String            @id @default(cuid())
  typeOfTrip      String            // one-way, round-trip
  fromLocation    String
  toLocation      String
  departureDate   DateTime
  returnDate      DateTime?
  numberOfPersons Int               @default(1)
  firstName       String
  lastName        String
  email           String
  phone           String
  classType       String?           @default("economy") // economy, business, first
  specialRequests String?
  status          ReservationStatus @default(PENDING)
  estimatedPrice  Float?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}