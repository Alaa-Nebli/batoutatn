generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id                String         @id @default(cuid())
  title             String         @unique
  metadata          String?
  description       String
  images            Json
  location_from     String
  location_to       String
  days              Int
  price             Float
  from_date         DateTime
  to_date           DateTime
  display           Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  generalConditions String
  priceInclude      String
  singleAdon        Int
  phone             String?
  whatsappNumber    String?        // WhatsApp number (optional, defaults to phone if not set)
  featured          Featured[]
  timeline          TripTimeline[]
}

model TripTimeline {
  id          String          @id @default(cuid())
  tripId      String
  title       String
  description String
  image       String?         // Keep for backward compatibility
  date        DateTime
  sortOrder   Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  trip        Trip            @relation(fields: [tripId], references: [id], onDelete: Cascade)
  images      TimelineImage[] // New: multiple images support
}

model Featured {
  id        String   @id @default(cuid())
  tripId    String
  image     String
  cta       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model LocalProgram {
  id            String            @id @default(cuid())
  title         String            @unique
  metadata      String?
  description   String
  images        Json
  location_from String
  location_to   String
  days          Int
  price         Float
  from_date     DateTime
  to_date       DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  timeline      ProgramTimeline[]
}

model ProgramTimeline {
  id           String          @id @default(cuid())
  programId    String
  title        String
  description  String
  image        String?         // Keep for backward compatibility
  date         DateTime
  sortOrder    Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  localProgram LocalProgram    @relation(fields: [programId], references: [id], onDelete: Cascade)
  images       TimelineImage[] // New: multiple images support
}

model TimelineImage {
  id                String           @id @default(cuid())
  url               String
  alt               String?
  sortOrder         Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations - one image can belong to either trip timeline OR program timeline
  tripTimelineId    String?
  programTimelineId String?
  
  tripTimeline      TripTimeline?    @relation(fields: [tripTimelineId], references: [id], onDelete: Cascade)
  programTimeline   ProgramTimeline? @relation(fields: [programTimelineId], references: [id], onDelete: Cascade)
  
  @@index([tripTimelineId])
  @@index([programTimelineId])
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}
